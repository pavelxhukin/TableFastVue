services:
  user_api:
    build: 
      context: .
      dockerfile: server/user/Dockerfile
    container_name: user_api
    ports:
      - 8000:8000
    depends_on:
      - postgres
    volumes:
      - ./server/user:/app
    networks:
      - internal
    env_file:
      - .env

  api:
    build: 
      context: .
      dockerfile: server/schedule/Dockerfile
    container_name: api
    ports:
      - ${APP_HOST_PORT}:4000
    depends_on:
      - postgres
    volumes:
      - ./server/schedule:/app
    restart: 
      always
    networks:
      - internal
    env_file:
      - .env

  postgres:
    image: postgres:latest
    container_name: postgres_container
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - .postgres:/var/lib/postgres/data
    restart:
      always
    networks:
      - internal

  # frontend:
  #   build:
  #     context: ./nginx
  #   networks:
  #     - internal

  # rabbitmq:
  #   image: rabbitmq:4.0-management-alpine
  #   hostname: rabbitmq
  #   restart: always
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: "rmuser"
  #     RABBITMQ_DEFAULT_PASS: "rmpassword"
  #     RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648"
  #   volumes:
  #     - rabbitmq-data:/var/lib/rabbitmq
  #   networks:
  #     - internal

  nginx:
    build: ./nginx
    container_name: nginx_container
    ports: 
      - 80:80
    depends_on: 
      - api
      - user_api
    networks:
      - internal

# volumes:
#   rabbitmq-data:

  
networks:
  internal:
    driver: overlay
    attachable: true

    